import { getBackendUrl } from './backend-config';

export class WebSocketConnection {
  private ws: WebSocket | null = null;
  private clientId: string;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectTimeout: NodeJS.Timeout | null = null;
  private connectionTimeout: NodeJS.Timeout | null = null;
  
  public onMessage: ((data: any) => void) | null = null;
  public onConnect: (() => void) | null = null;
  public onDisconnect: (() => void) | null = null;
  public onError: ((error: Event) => void) | null = null;
  public onConnecting: (() => void) | null = null;
  public onClose: (() => void) | null = null;

  constructor() {
    this.clientId = `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    this.connect();
  }

  private async connect() {
    try {
      // ‰ΩøÁî®ÂíåHTTP APIÁõ∏ÂêåÁöÑURLËß£ÊûêÈÄªËæë
      const wsUrl = this.getWebSocketUrl();
      
      console.log('üîó Connecting to WebSocket:', wsUrl);
      console.log('üè∑Ô∏è Client ID:', this.clientId);
      
      // ÈÄöÁü•ÂºÄÂßãËøûÊé•
      if (this.onConnecting) {
        this.onConnecting();
      }
      
      this.ws = new WebSocket(wsUrl);
      
      // Ê∑ªÂä†ËøûÊé•Ë∂ÖÊó∂Â§ÑÁêÜ
      this.connectionTimeout = setTimeout(() => {
        if (this.ws && this.ws.readyState === WebSocket.CONNECTING) {
          console.warn('‚ö†Ô∏è WebSocket connection timeout, closing connection');
          this.ws.close();
          this.handleConnectionError(new Error('Connection timeout'));
        }
      }, 5000); // 5ÁßíË∂ÖÊó∂
      
      // Ê∑ªÂä† readyState ÁõëÊéß
      const checkReadyState = () => {
        console.log('üîç WebSocket readyState:', this.ws?.readyState, '(0=CONNECTING, 1=OPEN, 2=CLOSING, 3=CLOSED)');
      };
      
      checkReadyState();
      setTimeout(checkReadyState, 100);
      setTimeout(checkReadyState, 1000);
      setTimeout(checkReadyState, 3000);
      
      this.ws.onopen = () => {
        // Ê∏ÖÈô§ËøûÊé•Ë∂ÖÊó∂
        if (this.connectionTimeout) {
          clearTimeout(this.connectionTimeout);
          this.connectionTimeout = null;
        }
        
        console.log('‚úÖ WebSocket connected to:', wsUrl);
        this.reconnectAttempts = 0;
        
        // ËÆ¢ÈòÖÊ∏∏Êàè‰∫ã‰ª∂ÂíåÊï∞ÊçÆÂèòÂåñÈÄöÁü•
        console.log('üì° Subscribing to channels...');
        this.subscribe('game_events');
        this.subscribe('data_changed');
        
        if (this.onConnect) {
          this.onConnect();
        }
      };
      
      this.ws.onmessage = (event) => {
        try {
          console.log('üì® Raw WebSocket message received:', event.data);
          const data = JSON.parse(event.data);
          console.log('üìä Parsed WebSocket data:', data);
          
          if (data.type === 'pong') {
            console.log('üíì Pong received');
            return;
          }
          
          if (this.onMessage) {
            this.onMessage(data);
          }
        } catch (error) {
          console.error('‚ùå Error parsing WebSocket message:', error, 'Raw data:', event.data);
        }
      };
      
      this.ws.onclose = (event) => {
        // Ê∏ÖÈô§ËøûÊé•Ë∂ÖÊó∂
        if (this.connectionTimeout) {
          clearTimeout(this.connectionTimeout);
          this.connectionTimeout = null;
        }
        
        console.log('üîí WebSocket disconnected. Code:', event.code, 'Reason:', event.reason);
        this.ws = null;
        
        if (this.onClose) {
          this.onClose();
        }
        
        if (this.onDisconnect) {
          this.onDisconnect();
        }
        
        // Â∞ùËØïÈáçËøû
        this.attemptReconnect();
      };
      
      this.ws.onerror = (error) => {
        // Ê∏ÖÈô§ËøûÊé•Ë∂ÖÊó∂
        if (this.connectionTimeout) {
          clearTimeout(this.connectionTimeout);
          this.connectionTimeout = null;
        }
        
        console.error('‚ùå WebSocket connection error:', error);
        console.error('‚ùå WebSocket state:', this.ws?.readyState);
        console.error('‚ùå WebSocket URL was:', wsUrl);
        
        this.handleConnectionError(error);
      };
      
    } catch (error) {
      console.error('Error creating WebSocket connection:', error);
      this.attemptReconnect();
    }
  }

  private handleConnectionError(error: any) {
    // Ê£ÄÊü•ÊòØÂê¶ÊòØËøûÊé•Ë¢´ÊãíÁªùÈîôËØØ
    if (error?.message?.includes('ECONNREFUSED') || 
        (typeof error === 'object' && Object.keys(error).length === 0)) {
      console.error('‚ùå WebSocket connection refused. Please check if the backend server is running.');
    }
    
    if (this.onError) {
      this.onError(error);
    }
    
    // Â∞ùËØïÈáçËøû
    this.attemptReconnect();
  }

  private getWebSocketUrl(): string {
    console.log('üîç ÂΩìÂâçÈ°µÈù¢‰ø°ÊÅØ:');
    console.log('  - hostname:', window.location.hostname);
    console.log('  - host:', window.location.host);
    console.log('  - protocol:', window.location.protocol);
    console.log('  - href:', window.location.href);

    // ‰ΩøÁî®backend-config.ts‰∏≠ÁöÑÈÄªËæëËé∑ÂèñÂêéÁ´ØURL
    const backendUrl = getBackendUrl();
    console.log('üåê ‰ªébackend-configËé∑ÂèñÁöÑÂêéÁ´ØURL:', backendUrl);

    // Â∞ÜHTTP(S)ÂçèËÆÆËΩ¨Êç¢‰∏∫WebSocketÂçèËÆÆ
    const wsProtocol = backendUrl.startsWith('https://') ? 'wss://' : 'ws://';
    const backendUrlWithoutProtocol = backendUrl.replace('http://', '').replace('https://', '');
    const wsUrl = `${wsProtocol}${backendUrlWithoutProtocol}/ws/${this.clientId}`;

    console.log('üîó ÊúÄÁªàWebSocket URL:', wsUrl);
    return wsUrl;
  }

  private attemptReconnect() {
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
    }
    
    if (this.connectionTimeout) {
      clearTimeout(this.connectionTimeout);
      this.connectionTimeout = null;
    }

    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('‚ùå Max reconnection attempts reached');
      return;
    }

    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);
    this.reconnectAttempts++;

    console.log(`üîÑ Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts}) in ${delay}ms`);

    this.reconnectTimeout = setTimeout(() => {
      this.connect();
    }, delay);
  }

  public subscribe(channel: string) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      const message = {
        type: 'subscribe',
        channel: channel
      };
      console.log('üì° Subscribing to channel:', channel);
      this.ws.send(JSON.stringify(message));
    } else {
      console.log('‚ö†Ô∏è WebSocket not ready, deferring subscription to:', channel);
      // Âª∂ËøüËÆ¢ÈòÖ
      setTimeout(() => {
        this.subscribe(channel);
      }, 1000);
    }
  }

  public unsubscribe(channel: string) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      const message = {
        type: 'unsubscribe',
        channel: channel
      };
      console.log('üì° Unsubscribing from channel:', channel);
      this.ws.send(JSON.stringify(message));
    }
  }

  public sendMessage(message: any) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(message));
    } else {
      console.log('‚ö†Ô∏è WebSocket not ready, message not sent:', message);
    }
  }

  public ping() {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      const message = { type: 'ping' };
      console.log('üíì Sending ping');
      this.ws.send(JSON.stringify(message));
    }
  }

  public disconnect() {
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }
    
    if (this.connectionTimeout) {
      clearTimeout(this.connectionTimeout);
      this.connectionTimeout = null;
    }

    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
    
    this.reconnectAttempts = 0;
  }
}